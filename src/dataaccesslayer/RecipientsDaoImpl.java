/**
 * File: RecipientsDataAccessObjectImplementation.java
 * Author: Indupoornima Aruvythil
 * Student Number: 041037831
 * Course & Section: 22S_CST8288_012
 * Description: Demonstration of DAO Design Pattern, MVC Design Pattern
 * References: Stanley Pieda AuthorsDataAccessObjectImplementation.java (2015)
 */
package dataaccesslayer;

import java.util.List;

import transferobjects.RecipientDTO;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;

/**
 * This class implements the interface RecipientsDao and is used to print the Table contents and table attributes
 * @author indup
 */
public class RecipientsDaoImpl implements RecipientsDao{

	@Override
	public List<RecipientDTO> getAllRecipients() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<RecipientDTO> recipients = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT * FROM Recipients ORDER BY AwardID");
			rs = pstmt.executeQuery();
			recipients = new ArrayList<RecipientDTO>();
			while(rs.next()){
				RecipientDTO recipient = new RecipientDTO();
				recipient.setAwardID(rs.getInt("AwardID"));
				recipient.setName(rs.getString("Name"));
				recipient.setYear(rs.getInt("Year"));
				recipient.setCity(rs.getString("City"));
				recipient.setCategory(rs.getString("Category"));
				recipients.add(recipient);
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return recipients;
	}

	@Override
	public RecipientDTO getRecipientByAwardId(Integer awardID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		RecipientDTO recipient = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT * FROM Recipients WHERE AwardID = ?");
			pstmt.setInt(1, awardID.intValue());
			rs = pstmt.executeQuery();
			while(rs.next()){
				recipient = new RecipientDTO();
				recipient.setAwardID(rs.getInt("AwardID"));
				recipient.setName(rs.getString("Name"));
				recipient.setYear(rs.getInt("Year"));
				recipient.setCity(rs.getString("City"));
				recipient.setCategory(rs.getString("Category"));
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return recipient;
	}

	@Override
	public void addRecipient(RecipientDTO recipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			// do not insert AwardID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO Recipients (Name, Year, City, Category) " +
			        "VALUES(?, ?, ?, ?)");
			pstmt.setString(1, recipient.getName());
			pstmt.setInt(2, recipient.getYear());
			pstmt.setString(3, recipient.getCity());
			pstmt.setString(4, recipient.getCategory());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateRecipient(RecipientDTO recipient) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource();
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE Recipients SET Name = ?, " + "Year = ?, " + "City = ?, " + "Category = ? WHERE AwardID = ?");
				pstmt.setString(1, recipient.getName());	
				pstmt.setInt(2, recipient.getYear().intValue());
                                pstmt.setString(3, recipient.getCity());
                                pstmt.setString(4, recipient.getCategory());
				pstmt.setInt(5, recipient.getAwardID().intValue());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteRecipient(RecipientDTO recipient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM Recipients WHERE AwardID = ?");	
			pstmt.setInt(1, recipient.getAwardID().intValue());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
        @Override
        public ResultSetMetaData ResultSet_getMetaData() {
                Connection con = null;
		Statement cstmt = null;
		ResultSet rs = null;
                ResultSetMetaData resultSetMetaData = null;
		
		try{
			DataSource ds = new DataSource();
			con = ds.createConnection();
			cstmt = con.createStatement();
                        String query = "SELECT * FROM Recipients";
			rs = cstmt.executeQuery(query);
                        resultSetMetaData = rs.getMetaData();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(cstmt != null){ cstmt.close(); }}
                        catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
                return resultSetMetaData;
        }
}
